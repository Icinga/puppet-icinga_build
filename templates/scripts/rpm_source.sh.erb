#!/usr/bin/env bash

# configuration
project=<%= @product.dump %>
os=<%= @_os.dump %>
dist=<%= @_dist.dump %>
release_type=<%= @release_type.dump %>
control_rpm=<%= @control_rpm.dump unless @control_rpm.nil? %>
control_branch=<%= @control_branch.dump %>
upstream_branch=<%= @upstream_branch.dump %>

###
# please do not edit below
###

set -ex

: ${BUILD_VERSION:=1}
: ${WORKDIR:=`pwd`}
: ${BUILD_BRANCH:=''}
: ${BUILD_REF:=''}

<%= scope.function_template(['icinga_build/scripts/rpm_functions.sh.erb']) %>

if [ -n "$control_rpm" ]; then
  pkg_src=packaging
else
  pkg_src=packaging/${project}
  control_branch="rpm/$control_branch"
fi

if [ -n "$BUILD_BRANCH" ]; then
  upstream_branch="$BUILD_BRANCH"
  UPSTREAM_GIT_BRANCH=origin/"$upstream_branch"

  if [ -n "$control_rpm" ]; then
    test_branch="$upstream_branch"
  else
    test_branch="rpm/$upstream_branch"
  fi

  # if this branch also exists in packaging XX
  if git --git-dir=packaging/.git/ rev-parse refs/remotes/packaging/"$test_branch" &>/dev/null; then
    control_branch="$test_branch"
  fi
elif [ -n "$BUILD_REF" ]; then
  upstream_branch="$BUILD_REF"
  UPSTREAM_GIT_BRANCH="$BUILD_REF"
else
  UPSTREAM_GIT_BRANCH=origin/"$upstream_branch"
fi

# ensure we checked out the packaging tree
cd packaging/
git clean -fxd
git branch -f "$control_branch" packaging/"$control_branch"
git checkout -f "$control_branch"
GIT_PAGER=cat git show -s "$control_branch"
cd ../

# copy to rpmbuild environment
cp -rv ${pkg_src}/* rpmbuild/SOURCES/
mv -v rpmbuild/SOURCES/*.spec rpmbuild/SPECS/

# download archive
if [ "$release_type" == "release" ] ; then
  # TODO: Move to images!
  if [ "$os" = "centos" -o "$os" = "fedora" ]; then
	  sudo yum update -y
	  sudo yum install -y rpmdevtools
  elif [ "$os" = sles ]; then
    suse_version=$(echo "$dist" | sed 's/\./_SP/')
    suse_repository=devel:tools
    suse_repository_path="$suse_repository"
    if [ "$suse_version" = 11_SP4 ] || [ "$suse_version" = 12_SP1 ]; then
      suse_repository="home:lazyfrosch:devel:tools"
      suse_repository_path="home:/lazyfrosch:/devel:/tools"
    fi

	if [ "$suse_version" = 11_SP4 ]; then
		sudo sed -i 's/enabled=0/enabled=1/' /etc/zypp/repos.d/nu_novell_com:SLE11-Security-Module.repo
		# Workaround for missing key
		sudo rpm --import http://packages.icinga.com/icinga.key
		sudo zypper refresh
		sudo zypper install -y openssl1 wget-openssl1
		sudo update-alternatives --set wget /usr/bin/wget.openssl1
		sudo su -c 'echo "check_certificate = no" >> /etc/wgetrc'
	fi

    if [ ! -e /etc/zypp/repos.d/devel_tools.repo ]; then
      # Use lazyfrosch's mirror, opensuse.org is unreliable
      if [ "$suse_version" = 15_SP0 ]; then
        sudo zypper addrepo http://download.opensuse.org/repositories/home:/lazyfrosch:/devel:/tools/SLE_15/home:lazyfrosch:devel:tools.repo devel_tools
      elif [ "$suse_version" != 11_SP4 ]; then
        sudo zypper addrepo http://download.opensuse.org/repositories/home:/lazyfrosch:/devel:/tools/SLE_"$suse_version"/home:lazyfrosch:devel:tools.repo devel_tools
      fi

    fi

    if ! rpm -q spectool &>/dev/null; then
      if [ "$suse_version" = 11_SP4 ]; then
        # zypper ref on SLES11 throws invalid metadata, install this directly #hatehatehate.
        sudo zypper install -y http://download.opensuse.org/repositories/home:/lazyfrosch:/devel:/tools/SLE_11_SP4/noarch/spectool-1.0.11-2.1.noarch.rpm
      else
        sudo zypper --gpg-auto-import-keys --non-interactive --no-gpg-checks install spectool
      fi
    fi

  elif [ "$os" = opensuse ]; then
    # Use lazyfrosch's mirror, opensuse.org is unreliable
    if [ ! -e /etc/zypp/repos.d/devel_tools.repo ]; then
      sudo zypper addrepo http://download.opensuse.org/repositories/home:/lazyfrosch:/devel:/tools/openSUSE_Leap_"$suse_version"/home:lazyfrosch:devel:tools.repo devel_tools
    fi
    if ! rpm -q spectool &>/dev/null; then
      sudo zypper --gpg-auto-import-keys --non-interactive --no-gpg-checks install spectool
    fi
  fi

	spectool -g rpmbuild/SPECS/*.spec

	# copy tarballs if present
	if ls *.tar.* &>/dev/null; then
	  mv *.tar.* rpmbuild/SOURCES
	fi
else
  export UPSTREAM_GIT_BRANCH

  UPSTREAM_GIT_NOUPDATE=1 \
  UPSTREAM_GIT_NOREPO=1 \
  GIT_DIR=packaging/.git \
    ${pkg_src}/get_snapshot

	version=`cat ${project}.version | cut -f1`
	revision="0.`date +%Y.%m.%d`+$BUILD_VERSION"
	git_commit=`cat ${project}.version | cut -f2`
	tarball=`cat ${project}.version | cut -f3`

	# Update spec file
	sed -i \
	  -e "0,/^Version: /{s/Version: .*/Version: ${version}/}" \
	  -e "0,/^Release: /{s/Release: .*/Release: ${revision}%{?dist}/}" \
	  -e "0,/^Source0\?: /{s/\(Source0\?\): .*/Source0: ${tarball}/}" \
	   "rpmbuild/SPECS/${project}.spec"

	cp -vl "${tarball}" rpmbuild/SOURCES/
fi

cd rpmbuild/

rpmbuild --nodeps -bs "SPECS/${project}.spec"

# TODO: when a package is already releases this might be problems in test
# (he could test the package in repository)
rpm -qp --queryformat "%{VERSION}-%{RELEASE}" "SRPMS/${project}"*".src.rpm" \
  >../"${project}-package.version"

rpmlint --info --verbose "SPECS/${project}.spec" || true

<?xml version="1.0" encoding="UTF-8"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>25</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.38">
      <projectNameList>
        <string><%= @_binary_job.encode(xml: :text) %></string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <%- unless @parameters.empty? -%>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <%- @parameters.each do |n,v|
          type = (v.is_a?(Hash) && v.key?('type')) ? v['type'] : 'String'
          raise Exception, "Invalid XML type for ParameterDefinition: #{type}" unless type =~ /^[a-z]+$/i
          type = "hudson.model.#{type}ParameterDefinition"

          default = (v.is_a?(Hash) ? v['default'] : v).to_s
        -%>
        <%= "<#{type}>" %>
          <name><%= n.encode(xml: :text) %></name>
          <description/>
          <%- unless default.empty? -%>
          <defaultValue><%= default.encode(xml: :text) %></defaultValue>
          <%- end -%>
        <%= "</#{type}>" %>
        <%- end -%>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <%- end -%>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.5.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url><%= (@control_deb || @control_repo).encode(xml: :text) %></url>
        <name>packaging</name>
      </hudson.plugins.git.UserRemoteConfig>
      <%- if @upstream_repo -%>
      <hudson.plugins.git.UserRemoteConfig>
        <url><%= @upstream_repo.encode(xml: :text) %></url>
        <name>origin</name>
      </hudson.plugins.git.UserRemoteConfig>
      <%- end -%>
    </userRemoteConfigs>
    <branches>
      <%- if @upstream_repo -%>
      <hudson.plugins.git.BranchSpec>
        <name>origin/<%= @upstream_branch.encode(xml: :text) %></name>
      </hudson.plugins.git.BranchSpec>
      <%- else -%>
      <hudson.plugins.git.BranchSpec>
        <name>packaging/<%= @control_deb.nil? ? 'deb/' : '' %><%= @control_branch.encode(xml: :text) %></name>
      </hudson.plugins.git.BranchSpec>
      <%- end -%>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GithubWeb"/>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>packaging</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
    </extensions>
  </scm>
  <assignedNode><%= @jenkins_label.encode(xml: :text) %></assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <% if @scm_trigger -%>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec><%= @scm_trigger.encode(xml: :text) %></spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <% else -%>
  <triggers/>
  <% end -%>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command><%= scope.function_template(['icinga_build/scripts/deb_source.sh.erb']).encode(xml: :text) %></command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.dsc,*.changes,*.tar.*,*.version</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <com.cloudbees.jenkins.plugins.okidocki.DockerBuildWrapper plugin="docker-custom-build-environment@1.6.5">
      <selector class="com.cloudbees.jenkins.plugins.okidocki.PullDockerImageSelector">
        <image><%= @_docker_image_source.encode(xml: :text) %></image>
      </selector>
      <dockerHost plugin="docker-commons@1.4.0"/>
      <% if @docker_registry_credentials -%>
      <dockerRegistryCredentials><%= @docker_registry_credentials.encode(xml: :text) %></dockerRegistryCredentials>
      <% else -%>
      <dockerRegistryCredentials/>
      <% end -%>
      <verbose>false</verbose>
      <volumes class="empty-list"/>
      <privileged>false</privileged>
      <group/>
      <command>/bin/cat</command>
      <forcePull>true</forcePull>
      <net>bridge</net>
    </com.cloudbees.jenkins.plugins.okidocki.DockerBuildWrapper>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
<%#-
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4.4">
      <includes>jenkins-scripts/**</includes>
      <excludes></excludes>
      <flatten>false</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>falsed</hudsonHomeRelative>
      <relativeTo>home</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
-%>
    <org.jvnet.hudson.tools.versionnumber.VersionNumberBuilder plugin="versionnumber@1.6">
      <versionNumberString>${BUILDS_TODAY}</versionNumberString>
      <projectStartDate>1969-12-31 00:00:00.0 UTC</projectStartDate>
      <environmentVariableName>BUILD_VERSION</environmentVariableName>
      <environmentPrefixVariable/>
      <oBuildsToday/>
      <oBuildsThisWeek/>
      <oBuildsThisMonth/>
      <oBuildsThisYear/>
      <oBuildsAllTime/>
      <skipFailedBuilds>false</skipFailedBuilds>
      <useAsBuildDisplayName>false</useAsBuildDisplayName>
    </org.jvnet.hudson.tools.versionnumber.VersionNumberBuilder>
  </buildWrappers>
</project>